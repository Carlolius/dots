#!/bin/bash

# Shows the weather in terminal
function weather {
	echo "
	1. Teo v2.wttr.in/Teo 
	2. Ferrol wttr.in/Ferrol
	3. Luna wttr.in/Moon
	"
	read opt
	case $opt in
		1)
			curl "v2.wttr.in/Teo?lang=es";;
		2)
			curl "wttr.in/Ferrol?lang=es";;
		3)
			curl "wttr.in/Moon?lang=es";;
	esac
}

# Try to find and activate pythonvirtualenv
activate_virtualenv() {
	if [ -f env/bin/activate ]; then . env/bin/activate;
	elif [ -f ../env/bin/activate ]; then . ../env/bin/activate;
	elif [ -f ../../env/bin/activate ]; then . ../../env/bin/activate;
	elif [ -f ../../../env/bin/activate ]; then . ../../../env/bin/activate;
	elif [ -f */bin/activate ]; then . */bin/activate;
	elif [ -f ../*/bin/activate ]; then . ../*/bin/activate;
	elif [ -f ../../*/bin/activate ]; then . ../../*/bin/activate;
	elif [ -f ../../../*/bin/activate ]; then . ../../../*/bin/activate;
	fi
}

# Creates an archive (*.tar.gz) from given directory.
function maketar() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }

# Create a ZIP archive of a file or folder.
function makezip() { zip -r "${1%%/}.zip" "$1" ; }

# Extract different types of compress files.
function extract {
	if [ -z "$1" ]; then
		# display usage if no parameters given
		echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
	else
		if [ -f $1 ] ; then
			# NAME=${1%.*}
			# mkdir $NAME && cd $NAME
			case $1 in
				*.tar.bz2)   tar xvjf $1    ;;
				*.tar.gz)    tar xvzf $1    ;;
				*.tar.xz)    tar xvJf $1    ;;
				*.lzma)      unlzma $1      ;;
				*.bz2)       bunzip2 $1     ;;
				*.rar)       unrar x -ad $1 ;;
				*.gz)        gunzip $1      ;;
				*.tar)       tar xvf $1     ;;
				*.tbz2)      tar xvjf $1    ;;
				*.tgz)       tar xvzf $1    ;;
				*.zip)       unzip $1       ;;
				*.Z)         uncompress $1  ;;
				*.7z)        7z x $1        ;;
				*.xz)        unxz $1        ;;
				*.exe)       cabextract $1  ;;
				*)           echo "extract: '$1' - unknown archive method" ;;
			esac
		else
			echo "$1 - file does not exist"
		fi
	fi
}

# Case to update different stuff quickly
function total_update {
	function u_guiki { echo "Actualizando güiki" && git -C ~/guiki pull --no-rebase }
	function u_dots { echo "Actualizando dots" && git -C ~/dots pull --no-rebase }
	function u_sistema { echo "Actualizando sistema" && yay }
	function u_vim { echo "Actualizando plugins de nvim" && nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync' }
	function u_pip { echo "Actualizando pip" && pip freeze --user | cut -d'=' -f1 | xargs -n1 pip install -U }
	if [[ $1 != '' ]] ; then
		opt=$1
	else
		echo "¿Qué actualizamos?
		s) Sistema
		v) Plugins de Vim
		r) Repositorios de git
		g) guiki
		d) dots
		A) Todo lo anterior
		p) pip
		n) nada"
		read opt
	fi
	case $opt in
		s)
			u_sistema;;
		v)
			u_vim;;
		g)
			u_guiki;;
		d)
			u_dots;;
		r)
			u_guiki
			u_dots
			;;
		[Aa])
			u_vim &
			u_guiki &
			u_dots &
			u_sistema
			;;
		p)
			u_pip;;
		n)
			echo "Ok";;
		*)
			echo "Mira a ver en que la has liado";;
	esac
}
